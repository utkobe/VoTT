import _ from "lodash";
import { ExportProvider } from "./exportProvider";
import { IProject, IExportProviderOptions } from "../../models/applicationState";
import Guard from "../../common/guard";
import { constants } from "../../common/constants";
import HtmlFileReader from "../../common/htmlFileReader";

/**
 * VoTT Json Export Provider options
 */
export interface IVottJsonExportProviderOptions extends IExportProviderOptions {
    /** Whether or not to include binary assets in target connection */
    includeImages: boolean;
}

/**
 * @name - Vott Json Export Provider
 * @description - Exports a project into a single JSON file that include all configured assets
 */
export class VottJsonExportProvider extends ExportProvider<IVottJsonExportProviderOptions> {
    constructor(project: IProject, options: IVottJsonExportProviderOptions) {
        super(project, options);
        Guard.null(options);
    }

    /**
     * Export project to VoTT JSON format
     */
    public async export(): Promise<void> {
        const results = await this.getAssetsForExport();

        if (this.options.includeImages) {
            await results.forEachAsync(async (assetMetadata) => {
                const arrayBuffer = await HtmlFileReader.getAssetArray(assetMetadata.asset);
                const assetFilePath = `vott-json-export/${assetMetadata.asset.name}`;
                await this.storageProvider.writeBinary(assetFilePath, Buffer.from(arrayBuffer));
            });
        }

        const exportObject: any = { ...this.project };
        exportObject.assets = _.keyBy(results, (assetMetadata) => assetMetadata.asset.id) as any;

        // We don't need these fields in the export JSON
        delete exportObject.sourceConnection;
        delete exportObject.targetConnection;
        delete exportObject.exportFormat;

        const newJson: any = {
            info: {
                description: "dataset generated by pipcook",
                url: "http:\/\/mscoco.org",
                version: "1.0",
                year: 2014,
                contributor: "Microsoft COCO group",
                date_created: "2015-01-27 09:11:52.357475",
                },
                images: [],
                licenses: [{
                url: "http:\/\/creativecommons.org\/licenses\/by-nc-sa\/2.0\/",
                id: 1,
                name: "Attribution-NonCommercial-ShareAlike License",
                }],
                annotations: [],
                categories: [],
        };

        let imageId = 0;
        // tslint:disable-next-line: forin
        for (let key in exportObject.assets) {
            const currentAsset = exportObject.assets[key];
            newJson.images.push({
                license: 1,
                file_name: currentAsset.asset.name,
                coco_url: currentAsset.asset.path,
                height: currentAsset.asset.size.height,
                width: currentAsset.asset.size.width,
                id: imageId+1
              });
            currentAsset.regions.forEach(region => {
                const category = newJson.categories.find((e: any) => e.name === region.tags[0]);
                let id;
                if (category) {
                    id = category.id;
                } else {
                    id = newJson.categories.length + 1;
                    newJson.categories.push({
                        id,
                        name: region.tags[0],
                        supercategory: region.tags[0]
                    });
                }
                newJson.annotations.push({
                    id: newJson.annotations.length + 1,
                    image_id: imageId+1,
                    category_id: id,
                    segmentation: [],
                    iscrowd: 0,
                    area: Number(currentAsset.asset.size.height * currentAsset.asset.size.width),
                    bbox: [region.boundingBox.left, region.boundingBox.top, region.boundingBox.width, region.boundingBox.height]
                  })
            })
            imageId++;
        }

        const fileName = `vott-json-export/${this.project.name.replace(/\s/g, "-")}${constants.exportFileExtension}`;
        await this.storageProvider.writeText(fileName, JSON.stringify(newJson, null, 4));
    }
}
